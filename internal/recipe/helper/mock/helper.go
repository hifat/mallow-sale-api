// Code generated by MockGen. DO NOT EDIT.
// Source: ./helper.go
//
// Generated by this command:
//
//	mockgen -source=./helper.go -destination=./mock/helper.go -package=mockRecipeHelper
//

// Package mockRecipeHelper is a generated GoMock package.
package mockRecipeHelper

import (
	context "context"
	reflect "reflect"

	recipeModule "github.com/hifat/mallow-sale-api/internal/recipe"
	gomock "go.uber.org/mock/gomock"
)

// MockIHelper is a mock of IHelper interface.
type MockIHelper struct {
	ctrl     *gomock.Controller
	recorder *MockIHelperMockRecorder
}

// MockIHelperMockRecorder is the mock recorder for MockIHelper.
type MockIHelperMockRecorder struct {
	mock *MockIHelper
}

// NewMockIHelper creates a new mock instance.
func NewMockIHelper(ctrl *gomock.Controller) *MockIHelper {
	mock := &MockIHelper{ctrl: ctrl}
	mock.recorder = &MockIHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHelper) EXPECT() *MockIHelperMockRecorder {
	return m.recorder
}

// FindAndGetByID mocks base method.
func (m *MockIHelper) FindAndGetByID(ctx context.Context, ids []string) (func(string) *recipeModule.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAndGetByID", ctx, ids)
	ret0, _ := ret[0].(func(string) *recipeModule.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAndGetByID indicates an expected call of FindAndGetByID.
func (mr *MockIHelperMockRecorder) FindAndGetByID(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndGetByID", reflect.TypeOf((*MockIHelper)(nil).FindAndGetByID), ctx, ids)
}
