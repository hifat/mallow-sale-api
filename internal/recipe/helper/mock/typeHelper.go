// Code generated by MockGen. DO NOT EDIT.
// Source: ./typeHelper.go
//
// Generated by this command:
//
//	mockgen -source=./typeHelper.go -destination=./mock/typeHelper.go -package=mockRecipeHelper
//

// Package mockRecipeHelper is a generated GoMock package.
package mockRecipeHelper

import (
	context "context"
	reflect "reflect"

	recipeModule "github.com/hifat/mallow-sale-api/internal/recipe"
	gomock "go.uber.org/mock/gomock"
)

// MockIRecipeTypeHelper is a mock of IRecipeTypeHelper interface.
type MockIRecipeTypeHelper struct {
	ctrl     *gomock.Controller
	recorder *MockIRecipeTypeHelperMockRecorder
}

// MockIRecipeTypeHelperMockRecorder is the mock recorder for MockIRecipeTypeHelper.
type MockIRecipeTypeHelperMockRecorder struct {
	mock *MockIRecipeTypeHelper
}

// NewMockIRecipeTypeHelper creates a new mock instance.
func NewMockIRecipeTypeHelper(ctrl *gomock.Controller) *MockIRecipeTypeHelper {
	mock := &MockIRecipeTypeHelper{ctrl: ctrl}
	mock.recorder = &MockIRecipeTypeHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecipeTypeHelper) EXPECT() *MockIRecipeTypeHelperMockRecorder {
	return m.recorder
}

// FindAndGetByCode mocks base method.
func (m *MockIRecipeTypeHelper) FindAndGetByCode(ctx context.Context, codes []string) (func(string) *recipeModule.RecipeTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAndGetByCode", ctx, codes)
	ret0, _ := ret[0].(func(string) *recipeModule.RecipeTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAndGetByCode indicates an expected call of FindAndGetByCode.
func (mr *MockIRecipeTypeHelperMockRecorder) FindAndGetByCode(ctx, codes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndGetByCode", reflect.TypeOf((*MockIRecipeTypeHelper)(nil).FindAndGetByCode), ctx, codes)
}
