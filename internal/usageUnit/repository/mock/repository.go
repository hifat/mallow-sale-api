// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository.go -destination=./mock/repository.go -package=mockUsageUnitRepository
//

// Package mockUsageUnitRepository is a generated GoMock package.
package mockUsageUnitRepository

import (
	context "context"
	reflect "reflect"

	usageUnitModule "github.com/hifat/mallow-sale-api/internal/usageUnit"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindByCode mocks base method.
func (m *MockRepository) FindByCode(ctx context.Context, code string) (*usageUnitModule.Prototype, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", ctx, code)
	ret0, _ := ret[0].(*usageUnitModule.Prototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode.
func (mr *MockRepositoryMockRecorder) FindByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockRepository)(nil).FindByCode), ctx, code)
}

// FindInCodes mocks base method.
func (m *MockRepository) FindInCodes(ctx context.Context, codes []string) ([]usageUnitModule.Prototype, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInCodes", ctx, codes)
	ret0, _ := ret[0].([]usageUnitModule.Prototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInCodes indicates an expected call of FindInCodes.
func (mr *MockRepositoryMockRecorder) FindInCodes(ctx, codes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInCodes", reflect.TypeOf((*MockRepository)(nil).FindInCodes), ctx, codes)
}
