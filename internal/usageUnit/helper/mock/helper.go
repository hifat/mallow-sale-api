// Code generated by MockGen. DO NOT EDIT.
// Source: ./helper.go
//
// Generated by this command:
//
//	mockgen -source=./helper.go -destination=./mock/helper.go -package=mockUsageUnitHelper
//

// Package mockUsageUnitHelper is a generated GoMock package.
package mockUsageUnitHelper

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIHelper is a mock of IHelper interface.
type MockIHelper struct {
	ctrl     *gomock.Controller
	recorder *MockIHelperMockRecorder
}

// MockIHelperMockRecorder is the mock recorder for MockIHelper.
type MockIHelperMockRecorder struct {
	mock *MockIHelper
}

// NewMockIHelper creates a new mock instance.
func NewMockIHelper(ctrl *gomock.Controller) *MockIHelper {
	mock := &MockIHelper{ctrl: ctrl}
	mock.recorder = &MockIHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHelper) EXPECT() *MockIHelperMockRecorder {
	return m.recorder
}

// GetNameByCode mocks base method.
func (m *MockIHelper) GetNameByCode(ctx context.Context, findInCodes []string) (func(string) string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameByCode", ctx, findInCodes)
	ret0, _ := ret[0].(func(string) string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNameByCode indicates an expected call of GetNameByCode.
func (mr *MockIHelperMockRecorder) GetNameByCode(ctx, findInCodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameByCode", reflect.TypeOf((*MockIHelper)(nil).GetNameByCode), ctx, findInCodes)
}
