// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository.go -destination=./mock/repository.go -package=mockSupplierRepository
//

// Package mockSupplierRepository is a generated GoMock package.
package mockSupplierRepository

import (
	context "context"
	reflect "reflect"

	supplierModule "github.com/hifat/mallow-sale-api/internal/supplier"
	utilsModule "github.com/hifat/mallow-sale-api/internal/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockIRepository) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockIRepositoryMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIRepository)(nil).Count), ctx)
}

// Create mocks base method.
func (m *MockIRepository) Create(ctx context.Context, req *supplierModule.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryMockRecorder) Create(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), ctx, req)
}

// DeleteByID mocks base method.
func (m *MockIRepository) DeleteByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockIRepositoryMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockIRepository)(nil).DeleteByID), ctx, id)
}

// Find mocks base method.
func (m *MockIRepository) Find(ctx context.Context, query *utilsModule.QueryReq) ([]supplierModule.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, query)
	ret0, _ := ret[0].([]supplierModule.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIRepositoryMockRecorder) Find(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIRepository)(nil).Find), ctx, query)
}

// FindByID mocks base method.
func (m *MockIRepository) FindByID(ctx context.Context, id string) (*supplierModule.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*supplierModule.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIRepository)(nil).FindByID), ctx, id)
}

// FindInIDs mocks base method.
func (m *MockIRepository) FindInIDs(ctx context.Context, ids []string) ([]supplierModule.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInIDs", ctx, ids)
	ret0, _ := ret[0].([]supplierModule.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInIDs indicates an expected call of FindInIDs.
func (mr *MockIRepositoryMockRecorder) FindInIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInIDs", reflect.TypeOf((*MockIRepository)(nil).FindInIDs), ctx, ids)
}

// UpdateByID mocks base method.
func (m *MockIRepository) UpdateByID(ctx context.Context, id string, req *supplierModule.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockIRepositoryMockRecorder) UpdateByID(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockIRepository)(nil).UpdateByID), ctx, id, req)
}
