// Code generated by MockGen. DO NOT EDIT.
// Source: ./helper.go
//
// Generated by this command:
//
//	mockgen -source=./helper.go -destination=./mock/helper.go -package=mockInventoryHelper
//

// Package mockInventoryHelper is a generated GoMock package.
package mockInventoryHelper

import (
	context "context"
	reflect "reflect"

	inventoryModule "github.com/hifat/mallow-sale-api/internal/inventory"
	gomock "go.uber.org/mock/gomock"
)

// MockIHelper is a mock of IHelper interface.
type MockIHelper struct {
	ctrl     *gomock.Controller
	recorder *MockIHelperMockRecorder
}

// MockIHelperMockRecorder is the mock recorder for MockIHelper.
type MockIHelperMockRecorder struct {
	mock *MockIHelper
}

// NewMockIHelper creates a new mock instance.
func NewMockIHelper(ctrl *gomock.Controller) *MockIHelper {
	mock := &MockIHelper{ctrl: ctrl}
	mock.recorder = &MockIHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHelper) EXPECT() *MockIHelperMockRecorder {
	return m.recorder
}

// DecreaseStock mocks base method.
func (m *MockIHelper) DecreaseStock(ctx context.Context, inventoryID string, purchaseQuantity, purchasePrice float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseStock", ctx, inventoryID, purchaseQuantity, purchasePrice)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecreaseStock indicates an expected call of DecreaseStock.
func (mr *MockIHelperMockRecorder) DecreaseStock(ctx, inventoryID, purchaseQuantity, purchasePrice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseStock", reflect.TypeOf((*MockIHelper)(nil).DecreaseStock), ctx, inventoryID, purchaseQuantity, purchasePrice)
}

// FindAndGetByID mocks base method.
func (m *MockIHelper) FindAndGetByID(ctx context.Context, ids []string) (func(string) *inventoryModule.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAndGetByID", ctx, ids)
	ret0, _ := ret[0].(func(string) *inventoryModule.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAndGetByID indicates an expected call of FindAndGetByID.
func (mr *MockIHelperMockRecorder) FindAndGetByID(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndGetByID", reflect.TypeOf((*MockIHelper)(nil).FindAndGetByID), ctx, ids)
}

// IncreaseStock mocks base method.
func (m *MockIHelper) IncreaseStock(ctx context.Context, inventoryID string, purchaseQuantity, purchasePrice float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseStock", ctx, inventoryID, purchaseQuantity, purchasePrice)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseStock indicates an expected call of IncreaseStock.
func (mr *MockIHelperMockRecorder) IncreaseStock(ctx, inventoryID, purchaseQuantity, purchasePrice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseStock", reflect.TypeOf((*MockIHelper)(nil).IncreaseStock), ctx, inventoryID, purchaseQuantity, purchasePrice)
}
